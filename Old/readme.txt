# Data_Analyzer

אפליקציית רשת מבוססת Flask (Python) לניתוח נתונים פיננסיים מחברות, תוך התמקדות בטעינת נתונים מקבצים מקומיים והצגתם בצורה ויזואלית.

## מבנה הפרויקט

האפליקציה בנויה בארכיטקטורה מודולרית לשיפור התחזוקתיות וההרחבה:
Data_Analyzer/
├── app.py                     # נקודת הכניסה הראשית של האפליקציה
├── requirements.txt           # תלויות הפרויקט
├── secret.py                  # (אופציונלי, לא ב-Git) מפתח סודי של Flask
├── config/
│   └── config.ini             # הגדרות תצורה
├── data/                      # תיקיית נתונים ראשית
│   ├── Annual/                # דוחות שנתיים
│   │   └── [TICKER]/          # תיקייה עבור כל טיקר (למשל, AAPL)
│   │       ├── Income_Statement.csv
│   │       ├── Balance_Sheet.csv
│   │       └── Cash_Flow.csv
│   └── Quarterly/             # דוחות רבעוניים
│       └── [TICKER]/
│           ├── Income_Statement.csv
│           ├── Balance_Sheet.csv
│           └── Cash_Flow.csv
├── modules/                   # מודולים פונקציונליים של האפליקציה
│   ├── init.py
│   ├── data_loader.py         # טוען שם חברה (מ-yfinance), פונקציות עזר לתצורה
│   ├── financial_statements.py # טעינה ועיבוד של דוחות כספיים מקבצים מקומיים
│   ├── price_history.py       # הורדה ועיבוד של היסטוריית מחירים (מ-yfinance)
│   ├── chart_creator.py       # יצירת גרפים אינטראקטיביים (באמצעות Plotly)
│   └── routes/                # מודולים של נתיבים (Blueprints)
│       ├── init.py
│       ├── home.py            # נתיבים הקשורים לדף הבית ובחירת טיקר
│       ├── graphs.py          # נתיבים הקשורים להצגת גרפים פיננסיים
│       └── valuations.py      # נתיבים הקשורים להערכות שווי (בפיתוח)
├── utils/                     # כלי עזר כלליים
│   ├── init.py
│   ├── helpers.py             # פונקציות עזר כלליות (נתיבי קבצים, פורמט מספרים וכו')
│   ├── config_loader.py       # טעינת הגדרות תצורה מקובץ config.ini
│   └── decorators.py          # דקורטורים מותאמים אישית (למשל, ticker_required)
├── templates/                 # תבניות HTML
│   ├── base_layout.html       # תבנית הבסיס הראשית
│   ├── content_graphs.html    # תבנית להצגת גרפים
│   ├── content_home.html      # תוכן דף הבית
│   └── content_valuations.html # תוכן עמוד הערכות שווי
├── tests/                     # תיקיית הבדיקות
│   ├── init.py
│   ├── conftest.py            # הגדרות גלובליות ו-fixtures לבדיקות
│   ├── test_app.py
│   ├── test_modules/
│   │   └── ...                # בדיקות למודולים
│   ├── test_routes/
│   │   └── ...                # בדיקות לנתיבים
│   └── test_utils/
│       └── ...                # בדיקות לכלי עזר
└── app.log                    # קובץ לוגים של האפליקציה


## תכונות עיקריות

-   **טעינת נתונים מקומית**: טעינה ועיבוד של דוחות כספיים (מאזן, רווח והפסד, תזרים מזומנים) מקובצי CSV המאוחסנים מקומית.
-   **נתוני מחירים**: משיכת נתוני מחירים היסטוריים (OHLCV) עם אינדיקטורים טכניים בסיסיים (ממוצעים נעים) באמצעות `yfinance`.
-   **ויזואליזציה**: יצירת גרפים אינטראקטיביים באמצעות Plotly להצגת מדדים פיננסיים וגרפי נרות.
-   **עיצוב מודולרי**: הפרדה ברורה של אחריויות לשיפור התחזוקתיות.
-   **ארכיטקטורת Blueprints**: ארגון נתיבי Flask באמצעות Blueprints.
-   **בדיקות מקיפות (בתהליך עדכון)**: סוויטת בדיקות מתוכננת עם בדיקות יחידה ואינטגרציה.

## התקנה

1.  שכפל את המאגר (repository):
    ```bash
    git clone <your_repository_url>
    cd Data_Analyzer
    ```

2.  צור סביבה וירטואלית והפעל אותה:
    ```bash
    python -m venv venv
    # On Windows:
    venv\Scripts\activate
    # On macOS/Linux:
    source venv/bin/activate
    ```

3.  התקן את התלויות הנדרשות:
    ```bash
    pip install -r requirements.txt
    ```

4.  הגדר את האפליקציה:
    * ודא שקובץ `config/config.ini` קיים ומוגדר כראוי (האפליקציה עשויה ליצור קובץ ברירת מחדל בהרצה ראשונה אם `ConfigLoader` תומך בכך). הגדרות עיקריות כוללות את `local_data_root` תחת `[PATHS]`.
    * צור קובץ `secret.py` בשורש הפרויקט עם `FLASK_SECRET_KEY` ייחודי לאבטחת ה-session. לדוגמה:
        ```python
        # secret.py
        FLASK_SECRET_KEY = 'your_very_secure_random_secret_key_here'
        ```
        **אל תכלול קובץ זה ב-Git.**

5.  **הכן את נתוני ה-CSV שלך:**
    * ארגן את קובצי ה-CSV של הדוחות הכספיים תחת תיקיית `data/` במבנה הבא:
        * `data/Annual/[TICKER]/Income_Statement.csv`
        * `data/Annual/[TICKER]/Balance_Sheet.csv`
        * `data/Annual/[TICKER]/Cash_Flow.csv`
        * וכנ"ל עבור `data/Quarterly/[TICKER]/...`

## שימוש

1.  הפעל את האפליקציה:
    ```bash
    python app.py
    ```

2.  פתח את הדפדפן ונווט לכתובת [http://127.0.0.1:5000/](http://127.0.0.1:5000/)

3.  הזן טיקר של מניה (לדוגמה: AAPL, MSFT) ולחץ על "בחר מניה וטען נתונים".

4.  נווט בין הלשוניות כדי לצפות ב:
    * **דף הבית**: היסטוריית מחירים עם גרף נרות וממוצעים נעים.
    * **גרפים**: מדדים פיננסיים שנתיים ורבעוניים (הכנסות, רווח נקי).
    * **הערכות שווי**: (בפיתוח) מדדי הערכות שווי וניתוחים.

## בדיקות

הרץ את סוויטת הבדיקות באמצעות:

```bash
# הרצת כל הבדיקות
python -m pytest

# הרצה עם דוח כיסוי (coverage)
python -m pytest --cov=Data_Analyzer tests/ --cov-report=html
# (שנה את Data_Analyzer לשם החבילה הראשית של האפליקציה שלך אם הוא שונה)


---
### 3. `project_map.md`

קובץ זה יספק תיאור מפורט יותר של הרכיבים הפנימיים והקשרים ביניהם.

```markdown
# Data_Analyzer - מפת פרויקט ובנק זיכרון

**עדכון אחרון:** (הוסף תאריך עדכון)

מסמך זה מספק מפה מקיפה של היישום המודולרי של Data_Analyzer, ומסביר את המטרה והקשרים בין הרכיבים השונים, החלטות עיצוב מרכזיות, והתפתחויות עתידיות.

## סקירה כללית

אפליקציית Data_Analyzer פותחה מאפס (או הוסבה) לארכיטקטורה מודולרית וקלה לתחזוקה. האפליקציה עוקבת אחר עקרונות פיתוח מודרניים בפייתון, כולל:

-   הפרדת אחריויות (Separation of concerns)
-   עיצוב מודולרי
-   ניתוב מבוסס Blueprints
-   ניהול תצורה
-   בדיקות מקיפות (בתהליך עדכון)

## 1. מטרת התוכנית הכוללת:

* ליצור אפליקציית רשת (מבוססת Flask בפייתון) המאפשרת למשתמשים לנתח נתונים פיננסיים של חברות.
* האפליקציה טוענת נתונים פיננסיים (דוחות כספיים) מקובצי CSV מקומיים המאורגנים לפי טיקר ותקופה (שנתי/רבעוני).
* האפליקציה מורידה נתוני מחירים היסטוריים באמצעות ספריית `yfinance`.
* האפליקציה שומרת נתונים מסוימים ב-session של Flask ומציגה נתונים ויזואלית באמצעות גרפים אינטראקטיביים של Plotly.
* מתוכננת פונקציונליות עתידית לביצוע הערכות שווי, חשבונות משתמשים, ייצוא נתונים ועוד.

## 2. רכיבי ליבה ומבנה קבצים:

### 2.1. נקודת כניסה לאפליקציה
    **קובץ**: `app.py`
    * נקודת הכניסה הראשית שמגדירה ומפעילה את אפליקציית Flask.
    * מגדירה לוגינג (logging).
    * רושמת Blueprints עבור החלקים השונים של האפליקציה.
    * מנהלת את ה-`SECRET_KEY` של Flask (טוענת מקובץ `secret.py` או ממשתני סביבה).

### 2.2. תצורה
    **תיקייה**: `config/`
    **קובץ**: `config/config.ini` (צפוי)
    * מאחסן הגדרות אפליקציה כמו נתיבים לקבצים (למשל, `local_data_root`).
    * נטען על ידי `utils.config_loader`.

### 2.3. אחסון נתונים
    **תיקייה**: `data/`
    * `data/Annual/[TICKER]/`: מכילה קובצי CSV של דוחות כספיים שנתיים עבור כל טיקר.
    * `data/Quarterly/[TICKER]/`: מכילה קובצי CSV של דוחות כספיים רבעוניים עבור כל טיקר.
        * שמות קבצים צפויים: `Income_Statement.csv`, `Balance_Sheet.csv`, `Cash_Flow.csv`.

### 2.4. מודולים פונקציונליים מרכזיים
    **תיקייה**: `modules/`

    **קובץ**: `modules/data_loader.py`
    * אחראי על טעינת שם חברה באמצעות `yfinance`.
    * עשוי להכיל פונקציות עזר הקשורות לטעינת תצורה (אם `ConfigLoader` משמש בו ישירות).

    **קובץ**: `modules/financial_statements.py`
    * טוען דוחות כספיים (מאזן, רווח והפסד, תזרים מזומנים; שנתי ורבעוני) מקובצי CSV מקומיים מהמבנה שצוין ב-`data/`.
    * משתמש בפונקציית עזר מ-`utils.helpers` (כמו `get_statement_file_path`) לקביעת נתיבי הקבצים.
    * מספק את הפונקציה `get_dataframe_from_session_or_csv` לטעינת נתונים, עם עדיפות ל-session ולאחר מכן לקובץ CSV.

    **קובץ**: `modules/price_history.py`
    * מוריד נתוני מחירים היסטוריים (OHLCV) באמצעות `yfinance`.
    * מחשב ממוצעים נעים (למשל, MA20, MA50, וכו').
    * יכול לחשב אינדיקטורים טכניים נוספים וסטטיסטיקות סיכום.

    **קובץ**: `modules/chart_creator.py`
    * יוצר גרפים אינטראקטיביים של סדרות זמן (עמודות, קו) באמצעות Plotly Express.
    * מייצר גרפי נרות עם ממוצעים נעים באמצעות Plotly Graph Objects.
    * מחזיר את נתוני הגרף כ-JSON (data ו-layout) לרינדור בצד הלקוח.
    * מטפל במקרים של נתונים חסרים או לא תקינים להצגה.

### 2.5. מטפלי נתיבים (Blueprints)
    **תיקייה**: `modules/routes/`

    **קובץ**: `modules/routes/home.py` (Blueprint: `home_bp`)
    * מטפל בתצוגת דף הבית הראשי (`/`).
    * מעבד בחירת טיקר (POST request), מפעיל טעינת נתונים מקומיים ומעדכן את ה-session.
    * מציג גרף נרות וסטטוס טעינת נתונים.

    **קובץ**: `modules/routes/graphs.py` (Blueprint: `graphs_bp`, prefix: `/graphs`)
    * מטפל בתצוגות גרפים שנתיים (`/annual`) ורבעוניים (`/quarterly`).
    * מייצר ומציג גרפים של הכנסות ורווח נקי.
    * מעבד נתוני דוחות כספיים לתצוגה, טוען מה-session או מקובצי CSV.

    **קובץ**: `modules/routes/valuations.py` (Blueprint: `valuations_bp`, prefix: `/valuations`)
    * מטפל בתצוגות הקשורות להערכות שווי (`/`).
    * כרגע placeholder ליישום עתידי של מדדי הערכות שווי.

### 2.6. מודולי עזר (Utility Modules)
    **תיקייה**: `utils/`

    **קובץ**: `utils/config_loader.py`
    * מנהל את תצורת האפליקציה.
    * טוען הגדרות מקובץ `config.ini`.
    * יוצר קובץ תצורה ברירת מחדל אם `config.ini` חסר (עם הגדרות מעודכנות ללא SimFin).
    * מספק ממשק מרכזי לתצורה.

    **קובץ**: `utils/helpers.py`
    * מכיל פונקציות עזר נפוצות.
    * ניהול נתיבי קבצים (למשל, `get_statement_file_path` המעודכן למבנה המקומי).
    * יצירת תיקיות (`ensure_directory_exists`).
    * עיצוב מספרים לתצוגה.

    **קובץ**: `utils/decorators.py`
    * מכיל דקורטורים מותאמים אישית, כמו `ticker_required` שמוודא שנבחר טיקר לפני גישה לנתיבים מסוימים.

### 2.7. תבניות HTML וקבצים סטטיים
    **תיקייה**: `templates/`
    * `base_layout.html`: תבנית הבסיס, כוללת תפריט צד, טופס בחירת טיקר עליון. (המודל של מפתח ה-API הוסר).
    * `content_home.html`: תוכן ספציפי לדף הבית, סקריפט לרינדור גרף נרות.
    * `content_graphs.html`: תוכן ספציפי לדף הגרפים, סקריפט לרינדור גרפים פיננסיים.
    * `content_valuations.html`: Placeholder לעמוד הערכות שווי.

    **תיקייה**: `static/` (אם קיימת, עבור CSS, JS, תמונות מקומיות)

### 2.8. קבצים מרכזיים אחרים
    * `requirements.txt`: תלויות הפרויקט (ללא `simfin`).
    * `README.md`: תיעוד הפרויקט הראשי (מעודכן).
    * `secret.py` (אופציונלי, לא ב-Git): עבור `FLASK_SECRET_KEY`.
    * `app.log`: קובץ לוגים של אירועי האפליקציה.

## 3. קשרים מרכזיים וזרימת נתונים:

1.  **זרימת תצורה**:
    * `utils.config_loader` טוען הגדרות מקובץ `config.ini`.
    * מודולים שונים (למשל, `app.py`, `modules/financial_statements.py`) עשויים להשתמש בתצורה זו לנתיבים והגדרות.

2.  **תהליך עיבוד נתונים (בעת בחירת טיקר)**:
    * המשתמש בוחר טיקר בממשק המשתמש (טופס ב-`base_layout.html`).
    * `modules/routes/home.route_set_ticker` (POST) מקבל את הטיקר.
    * מפעיל טעינת נתונים באמצעות:
        * `modules.financial_statements.load_financial_statements_from_local` (טעינת דוחות כספיים מקובצי CSV מקומיים).
        * `modules.price_history.download_price_history_with_mavg` (הורדת נתוני מחירים מ-Yahoo Finance).
    * נתונים מרכזיים (למשל, DataFrames של דוחות כספיים כ-JSON, סטטוס טעינה) מאוחסנים ב-Flask `session`.
    * המשתמש מופנה לדף הבית (או שהדף הנוכחי מרעונן).

3.  **שרשרת ויזואליזציה**:
    * כאשר נטען דף הדורש גרפים (למשל, דף הבית, דף הגרפים):
        * מטפלי נתיבים (למשל, ב-`modules/routes/home`, `modules/routes/graphs`) מאחזרים את הנתונים הדרושים:
            * היסטוריית מחירים מ-`modules.price_history`.
            * דוחות כספיים על ידי קריאה ל-`modules.financial_statements.get_dataframe_from_session_or_csv`.
        * פונקציות ב-`modules.chart_creator` (`create_candlestick_chart_with_mavg`, `create_timeseries_chart`) הופכות את הנתונים ל-JSON של Plotly (data ו-layout).
        * מטפלי הנתיבים מעבירים את ה-JSON הזה לתבניות ה-HTML.
        * JavaScript בתבניות (`content_home.html`, `content_graphs.html`) משתמש ב-`Plotly.newPlot()` כדי לרנדר את הגרפים בצד הלקוח.

## 4. החלטות עיצוב מרכזיות:

* **ארכיטקטורה מודולרית:** שימוש ב-Flask Blueprints לארגון וקלות תחזוקה.
* **רינדור גרפים בצד הלקוח:** גרפי Plotly נוצרים כ-JSON בשרת ומרונדרים בדפדפן באמצעות Plotly.js לשיפור האינטראקטיביות והפחתת העומס על השרת.
* **אחסון נתונים מקומי:**
    * דוחות כספיים נטענים מקובצי CSV מקומיים לכל טיקר, מה שמבטל תלות ב-API חיצוני לדוחות אלו.
    * Flask `session` משמש לאחסון נתונים נגישים בתדירות גבוהה (כמו DataFrames של דוחות כ-JSON, סטטוס טיקר) עבור ה-session הנוכחי של המשתמש, עם גיבוי לטעינה מ-CSV.

## 5. אתגרים היסטוריים ופתרונות (רלוונטיים לגרסה הנוכחית):

* `TypeError` עם `yfinance` וגרסאות פייתון ישנות: נפתר על ידי שדרוג סביבת הפייתון (למשל, ל-Python 3.10+).
* `ModuleNotFoundError` עבור `yfinance` (או ספריות אחרות): וידוא התקנה נכונה בסביבה הוירטואלית הפעילה.
* `NameError` עבור פונקציות: וידוא הגדרות פונקציה תקינות לפני קריאות וייבוא נכון בין מודולים (הסתייעות רבה במודולריזציה).
* גרפים שלא מרונדרים בדפדפן:
    * בעיות ראשוניות עם העברת HTML ישירות.
    * נפתר על ידי יצירת מפרטי גרף Plotly כ-JSON בשרת, ורינדור בצד הלקוח באמצעות JavaScript (`Plotly.newPlot()`).
    * וידוא קישור CDN עדכני של Plotly.js.
* שגיאות הרשאת כתיבה/קריאה ל-CSV (Permission Denied): בדיקת נעילות קבצים והרשאות.

## 6. שיקולים נוכחיים/עתידיים ותחומי שיפור:

### 6.1. שיפורי פונקציונליות ליבה
* **התאמה אישית של גרפים:**
    * אפשרות לבחירת ממוצעים נעים ותקופותיהם לגרפי נרות.
    * אפשרות לבחירת טווחי תאריכים לגרפי נרות.
    * הוספת פריטים נוספים מהדוחות הכספיים לגרפים (למשל, רווח גולמי, רווח תפעולי, FCF, הוצאות מחקר ופיתוח, הוצאות מכירה ושיווק).
* **מודול הערכות שווי (`modules/routes/valuations.py`):**
    * הגדרה ויישום של מודלי הערכות שווי ספציפיים (למשל, DCF, DDM, מכפילי רווח, מכפילי מכירות, EV/EBITDA).
    * ידרוש נתונים ממספר דוחות כספיים (רווח והפסד, מאזן, תזרים מזומנים) ואולי גם נתוני מחירים.
* **טיפול בשגיאות ומשוב למשתמש:** המשך שיפור האמינות ובהירות ההודעות.
* **ניהול Session:**
    * מעקב אחר גודל ה-session, במיוחד אם מאוחסנים בו יותר DataFrames.
    * וידוא ניקוי תקין של נתוני session ספציפיים לטיקר בעת בחירת טיקר חדש.

### 6.2. ביצועים ואופטימיזציה
* **יעילות טעינת קבצי CSV:** אם יהיו מספר רב מאוד של קבצים או קבצים גדולים מאוד, ייתכן שיידרשו אסטרטגיות טעינה אופטימליות יותר.
* **מטמון (Caching):** יישום מטמון מתקדם יותר בצד השרת (מעבר ל-Flask session) עבור נתונים שנגישים בתדירות גבוהה ומשתנים לעיתים רחוקות (למשל, שימוש ב-Flask-Caching) להפחתת קריאות מהדיסק.

### 6.3. תכונות חדשות (טווח ארוך)
* **חשבונות משתמשים:**
    * יישום הרשמה והתחברות משתמשים.
    * אפשרות למשתמשים לשמור טיקרים מועדפים, ניתוחים מותאמים אישית, או תצורות גרפים.
* **פונקציונליות ייצוא:**
    * אפשרות לייצא נתוני גרפים או טבלאות ל-CSV/Excel.
    * יצירת דוחות PDF של ניתוחים.
*